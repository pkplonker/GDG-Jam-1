//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Peter/Input/CameraInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraInput"",
    ""maps"": [
        {
            ""name"": ""cameraSwap"",
            ""id"": ""2bda8f70-93a8-48da-8841-112b565c1cb4"",
            ""actions"": [
                {
                    ""name"": ""camera"",
                    ""type"": ""Value"",
                    ""id"": ""3fa8e127-3428-4d66-b0a3-578be351052e"",
                    ""expectedControlType"": ""Key"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6338d07f-9e7e-482f-85cd-6ef159fc0ddd"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""924b1fe2-455b-4119-980a-50916ee9cb24"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c1e83d9-eae4-4edf-92d7-cf3d7fb13cde"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // cameraSwap
        m_cameraSwap = asset.FindActionMap("cameraSwap", throwIfNotFound: true);
        m_cameraSwap_camera = m_cameraSwap.FindAction("camera", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // cameraSwap
    private readonly InputActionMap m_cameraSwap;
    private List<ICameraSwapActions> m_CameraSwapActionsCallbackInterfaces = new List<ICameraSwapActions>();
    private readonly InputAction m_cameraSwap_camera;
    public struct CameraSwapActions
    {
        private @CameraInput m_Wrapper;
        public CameraSwapActions(@CameraInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @camera => m_Wrapper.m_cameraSwap_camera;
        public InputActionMap Get() { return m_Wrapper.m_cameraSwap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraSwapActions set) { return set.Get(); }
        public void AddCallbacks(ICameraSwapActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraSwapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraSwapActionsCallbackInterfaces.Add(instance);
            @camera.started += instance.OnCamera;
            @camera.performed += instance.OnCamera;
            @camera.canceled += instance.OnCamera;
        }

        private void UnregisterCallbacks(ICameraSwapActions instance)
        {
            @camera.started -= instance.OnCamera;
            @camera.performed -= instance.OnCamera;
            @camera.canceled -= instance.OnCamera;
        }

        public void RemoveCallbacks(ICameraSwapActions instance)
        {
            if (m_Wrapper.m_CameraSwapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraSwapActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraSwapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraSwapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraSwapActions @cameraSwap => new CameraSwapActions(this);
    public interface ICameraSwapActions
    {
        void OnCamera(InputAction.CallbackContext context);
    }
}
